import requests
import json
from dotenv import load_dotenv
import os

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ YandexGPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.
def sendMessageToYandexGPT(prompt: str, isPrint: bool = False, isSmartModel: bool = False) -> str:
    print("–ü–æ—Å—ã–ª–∞—é –∑–∞–ø—Ä–æ—Å –∫ YandexGPT:")
    if isPrint:
            print(f"\nüí´ PROMPT:\n{prompt}\n")
    if isSmartModel:
        model = "yandexgpt"
        # model = "yandexgpt-pro" # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    else:
        model = "yandexgpt-lite" # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Å —Ç–æ–∫–µ–Ω–æ–º API

    api_key = os.getenv("API_KEY")
    folder_id = "b1gomnf0uf3ims6eha2v"

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }

    data = {
        "modelUri": f"gpt://{folder_id}/{model}/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": 200 ### –û–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞ –±—É–¥—É—â–µ–µ
        },
        "messages": [
            {"role": "user", "text": prompt}
        ]
    }

    response = requests.post(url, headers=headers, data=json.dumps(data))

    if response.ok:
        result = response.json()
        result_text = result["result"]["alternatives"][0]["message"]["text"]
        # print_result_text = formatted_json_prompt_and_answer(prompt, result_text)
        # if(isPrint): print("\n" + print_result_text + "\n") 
        # –ü–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –≤ —Å–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–µ —Å –æ—Ç–≤–µ—Ç–æ–º
        if isPrint:
            # print(f"\nüí´ PROMPT:\n{prompt}\n\nüí¨ AI ANSWER:\n{result_text}\n")
            print(f"\nüí¨ AI ANSWER:\n{result_text}\n")
        return result_text
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
    
def formatted_json_prompt_and_answer(prompt, answer):
    data = {
        "prompt": prompt,
        "answer": answer
    }
    # –ò –Ω–∞–≤–µ—Ä–Ω–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —á—Ç–æ-—Ç–æ —Ç–∏–ø–æ –∫–æ–¥–∞, –∏–ª–∏ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞. –ù–æ —ç—Ç–æ –ø–æ–∑–∂–µ
    return json.dumps(data, ensure_ascii=False, indent=4)


def clearAnswerCode(input_code):
    return input_code