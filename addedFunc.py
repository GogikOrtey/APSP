import requests
import json
from dotenv import load_dotenv
import os
import html as html_lx
import re

import html as std_html
from lxml import html as lh
from lxml import etree

# TODO: –ö–æ–≥–¥–∞ –∑–¥–µ—Å—å –Ω–∞–±–µ—Ä—ë—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π, —Ä–∞–∑–±–∏—Ç—å –∏—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –∏ –¥–æ–±–∞–≤–∏—Ç—å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ YandexGPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.
def sendMessageToYandexGPT(prompt: str, isSmartModel: bool = False, isPrint: bool = True, temperature = 0.8, maxTokens = 1024) -> str:
    print("–ü–æ—Å—ã–ª–∞—é –∑–∞–ø—Ä–æ—Å –∫ YandexGPT:")

    if isSmartModel:
        model = "yandexgpt"
        print("üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –º–æ–¥–µ–ª—å")
        # model = "yandexgpt-pro" # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    else:
        model = "yandexgpt-lite" # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if isPrint:
            print(f"\nüí´ PROMPT:\n{prompt}\n")

    load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Å —Ç–æ–∫–µ–Ω–æ–º API

    api_key = os.getenv("API_KEY")
    folder_id = "b1gomnf0uf3ims6eha2v"

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }

    data = {
        "modelUri": f"gpt://{folder_id}/{model}/latest",
        "completionOptions": {
            "stream": False,
            "temperature": temperature, #0.6,
            "maxTokens": maxTokens, #300

            # –î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            "topP": 0.9,         
            "frequencyPenalty": 0.2,
            "presencePenalty": 0.2
        },
        "messages": [
            # {"role": "system", "text": "–¢—ã ‚Äî —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –æ—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ."},
            {"role": "user", "text": prompt}
        ]
    }

    response = requests.post(url, headers=headers, data=json.dumps(data))

    if response.ok:
        result = response.json()
        result_text = result["result"]["alternatives"][0]["message"]["text"]
        # print_result_text = formatted_json_prompt_and_answer(prompt, result_text)
        # if(isPrint): print("\n" + print_result_text + "\n") 
        # –ü–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –≤ —Å–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–µ —Å –æ—Ç–≤–µ—Ç–æ–º
        if isPrint:
            # print(f"\nüí´ PROMPT:\n{prompt}\n\nüí¨ AI ANSWER:\n{result_text}\n")
            print(f"\nüí¨ AI ANSWER:\n{result_text}\n")
        return result_text
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
    
def formatted_json_prompt_and_answer(prompt, answer):
    data = {
        "prompt": prompt,
        "answer": answer
    }
    # –ò –Ω–∞–≤–µ—Ä–Ω–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —á—Ç–æ-—Ç–æ —Ç–∏–ø–æ –∫–æ–¥–∞, –∏–ª–∏ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞. –ù–æ —ç—Ç–æ –ø–æ–∑–∂–µ
    return json.dumps(data, ensure_ascii=False, indent=4)


def clearAnswerCode(input_code):
    return input_code

# def clean_html_text(s: str, keep_tags=False) -> str:
#     if not isinstance(s, str):
#         return ""

#     # 1Ô∏è‚É£ –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏ (&nbsp; ‚Üí –ø—Ä–æ–±–µ–ª, &amp; ‚Üí &)
#     s = html_lx.unescape(s)

#     # 2Ô∏è‚É£ –£–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã (0‚Äì31, –∫—Ä–æ–º–µ \n –∏ \t)
#     s = re.sub(r'[\x00-\x09\x0B-\x1F\x7F]', '', s)

#     # 3Ô∏è‚É£ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —É–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
#     if not keep_tags:
#         s = re.sub(r'<[^>]+>', '', s)

#     # 4Ô∏è‚É£ –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ –ø—Ä–æ–±–µ–ª—ã, –≤ —Ç.—á. –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ
#     s = s.replace('\xa0', ' ').replace('\u200b', ' ')  # nbsp –∏ zero-width space

#     # 5Ô∏è‚É£ –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤–∏–¥—ã –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–±–µ–ª
#     s = re.sub(r'\s+', ' ', s)

#     # 6Ô∏è‚É£ –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
#     s = s.strip()

#     return s

def get_html(url: str, headers: dict = None, timeout: int = 10, is_clear_html = True) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-–æ—Ç–≤–µ—Ç.

    :param url: –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç
    :param headers: –°–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None)
    :param timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—Å–µ–∫—É–Ω–¥—ã)
    :return: HTML-—Å—Ç—Ä–æ–∫–∞
    """
    if headers is None:
        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∞–π—Ç—ã —Ç—Ä–µ–±—É—é—Ç User-Agent
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
        }

    try:
        response = requests.get(url, headers=headers, timeout=timeout)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ (200 OK)
        if is_clear_html == False: return response.text
        cleared_text = clean_html_preserve_structure(response.text)
        return cleared_text
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
        return ""
    

class ErrorHandler(Exception):
    """–ú–æ—ë –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ."""

    def __init__(self, message, error_code=0):
        self.message = message
        self.error_code = error_code

        full_msg = (
            f"üî¥ –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–æ–π: {message}"
            if error_code == 0
            else f"üî¥ –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–æ–π: {message}. –°—Ç–∞–¥–∏—è –∏ —à–∞–≥: {error_code}"
        )
        super().__init__(full_msg)


# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# raise ErrorHandler("–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")           # –±–µ–∑ –∫–æ–¥–∞
# raise ErrorHandler("–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", 1)      # —Å —á–∏—Å–ª–æ–≤—ã–º –∫–æ–¥–æ–º
# raise ErrorHandler("–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", "2-1")    # —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∫–æ–¥–æ–º



# –ù–∞—Ö–æ–¥–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ html
# –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
# –ù–æ –ø–∏—Å–∞–ª–æ—Å—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–∞–ª–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Ç—Å–∞ –¥–ª—è YandexGPT
def find_contexts(text: str, substring: str, context_size: int = 300) -> list[str]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è `substring` –≤ `text` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫
    –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ (–ø–æ `context_size` —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è).
    –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö.
    """
    results = []
    substring = re.escape(substring)  # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    matches = list(re.finditer(substring, text, flags=re.IGNORECASE))

    for match in matches:
        start = max(0, match.start() - context_size)
        end = min(len(text), match.end() + context_size)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if results and start <= results[-1][1]:
            # –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º
            prev_start, prev_end = results[-1]
            results[-1] = (prev_start, max(prev_end, end))
        else:
            results.append((start, end))

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∫—É—Å–∫–∏ —Ç–µ–∫—Å—Ç–∞
    contexts = [text[s:e] for s, e in results]
    return contexts


# # –ü–æ–ª—É—á–∞–µ–º –∫—É—Å–∫–∏ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ
# result = find_contexts(html, substring_name)
# print(result)




### –û—á–∏—Å—Ç–∫–∞ html –æ—Ç–≤–µ—Ç–∞
def clean_html_preserve_structure(html_text: str) -> str:
    """
    –ß–∏—Å—Ç–∏—Ç –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã –≤ html_text:
    - –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç html-—Å—É—â–Ω–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–æ–≤,
    - —É–¥–∞–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ zero-width,
    - –∑–∞–º–µ–Ω—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω.
    –¢–µ–≥–∏/–∞—Ç—Ä–∏–±—É—Ç—ã/—Å–∫—Ä–∏–ø—Ç—ã –Ω–µ –º–µ–Ω—è—é—Ç—Å—è.
    """

    # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∫—Ä–æ–º–µ —Ç–∞–±, LF, CR –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    _CTRLS_RE = re.compile(r'[\x00-\x09\x0B-\x1F\x7F]')

    # —Ç–µ–≥–∏, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    _SKIP_TAGS = {"script", "style", "noscript"}

    def _clean_text_node(s: str) -> str:
        if s is None:
            return s
        # 1) –¥–µ–∫–æ–¥–∏—Ä—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –Ω–æ–¥–µ
        s = std_html.unescape(s)
        # 2) —É–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ / –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        s = _CTRLS_RE.sub("", s)
        # 3) –∑–∞–º–µ–Ω—è–µ–º zero-width –∏ non-breaking –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–±–µ–ª
        s = s.replace('\u200b', ' ').replace('\u00a0', ' ')
        # 4) —Å–≤–æ–¥–∏–º –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –ø—Ä–æ–±–µ–ª—ã/—Ç—Ä/—Ç–∞–±/–ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª
        s = re.sub(r'\s+', ' ', s)
        # 5) –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
        return s.strip()

    if not isinstance(html_text, str):
        return ""

    # –°–æ—Ö—Ä–∞–Ω–∏–º –ø—Ä–∏–∑–Ω–∞–∫ doctype –≤ –Ω–∞—á–∞–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å), —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    doctype_prefix = ""
    stripped = html_text.lstrip()
    if stripped.lower().startswith("<!doctype"):
        # –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–æ '>' –∫–∞–∫ doctype
        i = html_text.lower().find('>')
        if i != -1:
            doctype_prefix = html_text[:i+1]
            # –æ—Å—Ç–∞–≤–∏–º —Ç–µ–ª–æ –±–µ–∑ doctype –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ (–ø–∞—Ä—Å–µ—Ä —Ç–æ–∂–µ —É–º–µ–µ—Ç —Å –Ω–∏–º, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π)
            html_body = html_text[i+1:]
        else:
            html_body = html_text
    else:
        html_body = html_text

    # –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç (document_fromstring —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ—Ä–µ–Ω—å <html>)
    try:
        doc = lh.document_fromstring(html_body)
    except etree.ParserError:
        # –Ω–∞ —Å–ª—É—á–∞–π –∫—Ä–∏–≤–æ–≥–æ HTML ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–∞—Ä—Å–µ—Ä
        parser = lh.HTMLParser(recover=True)
        doc = lh.fromstring(html_body, parser=parser)

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏ —á–∏—Å—Ç–∏–º .text –∏ .tail, –ø—Ä–æ–ø—É—Å–∫–∞—è _SKIP_TAGS
    for el in doc.iter():
        # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if isinstance(el, etree._Comment):
            continue

        tag = getattr(el, "tag", None)
        if isinstance(tag, str) and tag.lower() in _SKIP_TAGS:
            # –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ script/style
            continue

        # –æ—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–≥–∞
        if el.text:
            cleaned = _clean_text_node(el.text)
            # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None (—á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å "")
            el.text = cleaned if cleaned != "" else None

        # –æ—á–∏—Å—Ç–∫–∞ —Ö–≤–æ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ø–æ—Å–ª–µ —Ç–µ–≥–∞, –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â. sibling)
        if el.tail:
            cleaned_tail = _clean_text_node(el.tail)
            el.tail = cleaned_tail if cleaned_tail != "" else None

    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–∞–¥ –≤ HTML
    out_html = lh.tostring(doc, encoding='unicode', method='html', pretty_print=False)

    # –µ—Å–ª–∏ –±—ã–ª doctype ‚Äî –≤–µ—Ä–Ω—ë–º –µ–≥–æ —Å–ø–µ—Ä–µ–¥–∏ (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    if doctype_prefix:
        # —É–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–π –≤–µ–¥—É—â–∏–π –ø—Ä–æ–±–µ–ª/–Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        out_html = doctype_prefix + "\n" + out_html.lstrip()

    return out_html