import requests
import json
from dotenv import load_dotenv
import os

# TODO: –ö–æ–≥–¥–∞ –∑–¥–µ—Å—å –Ω–∞–±–µ—Ä—ë—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π, —Ä–∞–∑–±–∏—Ç—å –∏—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –∏ –¥–æ–±–∞–≤–∏—Ç—å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ YandexGPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.
def sendMessageToYandexGPT(prompt: str, isSmartModel: bool = False, isPrint: bool = True) -> str:
    print("–ü–æ—Å—ã–ª–∞—é –∑–∞–ø—Ä–æ—Å –∫ YandexGPT:")

    if isSmartModel:
        model = "yandexgpt"
        print("üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –º–æ–¥–µ–ª—å")
        # model = "yandexgpt-pro" # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    else:
        model = "yandexgpt-lite" # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if isPrint:
            print(f"\nüí´ PROMPT:\n{prompt}\n")

    load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Å —Ç–æ–∫–µ–Ω–æ–º API

    api_key = os.getenv("API_KEY")
    folder_id = "b1gomnf0uf3ims6eha2v"

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "Content-Type": "application/json"
    }

    data = {
        "modelUri": f"gpt://{folder_id}/{model}/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.8, #0.6,
            "maxTokens": 1024, #300

            # –î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            "topP": 0.9,         
            "frequencyPenalty": 0.2,
            "presencePenalty": 0.2
        },
        "messages": [
            # {"role": "system", "text": "–¢—ã ‚Äî —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –æ—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ."},
            {"role": "user", "text": prompt}
        ]
    }

    response = requests.post(url, headers=headers, data=json.dumps(data))

    if response.ok:
        result = response.json()
        result_text = result["result"]["alternatives"][0]["message"]["text"]
        # print_result_text = formatted_json_prompt_and_answer(prompt, result_text)
        # if(isPrint): print("\n" + print_result_text + "\n") 
        # –ü–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –≤ —Å–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–µ —Å –æ—Ç–≤–µ—Ç–æ–º
        if isPrint:
            # print(f"\nüí´ PROMPT:\n{prompt}\n\nüí¨ AI ANSWER:\n{result_text}\n")
            print(f"\nüí¨ AI ANSWER:\n{result_text}\n")
        return result_text
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
    
def formatted_json_prompt_and_answer(prompt, answer):
    data = {
        "prompt": prompt,
        "answer": answer
    }
    # –ò –Ω–∞–≤–µ—Ä–Ω–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —á—Ç–æ-—Ç–æ —Ç–∏–ø–æ –∫–æ–¥–∞, –∏–ª–∏ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞. –ù–æ —ç—Ç–æ –ø–æ–∑–∂–µ
    return json.dumps(data, ensure_ascii=False, indent=4)


def clearAnswerCode(input_code):
    return input_code

def get_html(url: str, headers: dict = None, timeout: int = 10) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-–æ—Ç–≤–µ—Ç.

    :param url: –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç
    :param headers: –°–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None)
    :param timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—Å–µ–∫—É–Ω–¥—ã)
    :return: HTML-—Å—Ç—Ä–æ–∫–∞
    """
    if headers is None:
        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∞–π—Ç—ã —Ç—Ä–µ–±—É—é—Ç User-Agent
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
        }

    try:
        response = requests.get(url, headers=headers, timeout=timeout)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ (200 OK)
        return response.text
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
        return ""
    

class ErrorHandler(Exception):
    """–ú–æ—ë –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ."""

    def __init__(self, message, error_code=0):
        self.message = message
        self.error_code = error_code

        full_msg = (
            f"üî¥ –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–æ–π: {message}"
            if error_code == 0
            else f"üî¥ –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–æ–π: {message}. –°—Ç–∞–¥–∏—è –∏ —à–∞–≥: {error_code}"
        )
        super().__init__(full_msg)


# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# raise ErrorHandler("–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")           # –±–µ–∑ –∫–æ–¥–∞
# raise ErrorHandler("–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", 1)      # —Å —á–∏—Å–ª–æ–≤—ã–º –∫–æ–¥–æ–º
# raise ErrorHandler("–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", "2-1")    # —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∫–æ–¥–æ–º