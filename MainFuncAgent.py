# –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –∞–≥–µ–Ω—Ç–∞

from addedFunc import sendMessageToYandexGPT
from addedFunc import get_html
from addedFunc import ErrorHandler
from bs4 import BeautifulSoup
from lxml import html as html_lx
import requests
import json
import re





# –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã:
# 1. –ü–æ–ª—É—á–µ–Ω–∏–µ:
#   * –¢–ó –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø—É–Ω–∫—Ç–∞–º
#   * –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç
#   * –¢–∞–±–ª–∏—á–∫–∏ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–∞–Ω–Ω—ã–º–∏
# 2. –ê–≥–µ–Ω—Ç –ø—Ä–æ–±—É–µ—Ç –∑–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π html
# 3. –ê–≥–µ–Ω—Ç —Ä–∞–∑–±–∏—Ä–∞–µ—Ç —Ç–∞–±–ª–∏—á–∫—É –∏ –¢–ó –≤ JSON —Ñ–æ—Ä–º–∞—Ç

# # ------------------

# print("–°—Ç–∞–¥–∏—è 2: –ü—Ä–æ–±—É–µ–º –∑–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π html")

# url = "https://vodomirural.ru"
# html = get_html(url)
# print(html[:500])  # –í—ã–≤–µ–¥–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å
# # print(html) 
# if(len(html) < 500): print("–û—Ç–≤–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: –°–ª–∏—à–∫–æ–º –º–∞–ª–∞—è –¥–ª–∏–Ω–∞")
# # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–∞—Ö —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º

# # ------------------

# 4. –ó–∞—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–ª–∏ —á–∞—Å—Ç—å. –ï—Å–ª–∏ –¥–∞ - —Ç–æ –æ–∫, –∏–¥—ë–º –¥–∞–ª—å—à–µ
# –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –º–æ–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å –±–µ–∑ –∑–∞—â–∏—Ç—ã

# url_first_item = "https://vodomirural.ru/catalog/vanny_stalnye_i_aksessuary_k_nim/33951/"






# –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:
data_input_table = {
    "links": {
        "simple": [
            {
                "link": "https://vodomirural.ru/catalog/vanny_stalnye_i_aksessuary_k_nim/33951/",
                "name": "–í–∞–Ω–Ω–∞ —Å—Ç–∞–ª—å 1600—Ö700—Ö400–º–º antika –±–µ–ª—ã–π –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å –Ω–æ–∂–∫–∞–º–∏ –í–ò–ó –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ",
                "price": "10 320",
                "brand": "–êntika",
                "inStock": True,
                "_selectors": {
                    "name": "",
                    "price": "",
                    "brand": "",
                    "inStock": "",
                }
            }
        ]
    },
    "search_requests": []
}
# TODO: –ü–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ –±—ã –æ–Ω –∏—Å–∫–∞–ª –Ω–µ –ø–æ–ª–Ω—ã–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ, –∞ —á–∞—Å—Ç–∏—á–Ω—ã–º
# –≠—Ç–æ –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à—É —Ç–∞–∫—É—é —à—Ç—É–∫—É –¥–ª—è price

first_item_link = data_input_table["links"]["simple"][0]["link"]
# print(first_item_link)
html = get_html(first_item_link)
# print(html[:500])

text_includes = data_input_table["links"]["simple"][0]["name"]
if text_includes in html:
    # print("üü¢ –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞!")
    a = 1
else:
    print("üü† –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    raise ErrorHandler("–ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1 —Ç–æ–≤–∞—Ä–∞, –Ω–∞ –Ω–µ–π –Ω–µ –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", "4-1")



### –ó–¥–µ—Å—å —Ü–∏–∫–ª for –ø–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º –≤ —Å–ª–æ–≤–∞—Ä–µ simple



### –í–æ—Ç –∑–¥–µ—Å—å, –¥–∞–ª–µ–µ, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏—Å—å –≤—Ç–æ—Ä—ã–º —Ü–∏–∫–ª–æ–º for –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º, –∏:
# 1. –ü–æ–ª—É—á–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä
# 2. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É, –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
# 3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –≤ JSON






# –ù–∞—Ö–æ–¥–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ html
def find_contexts(text: str, substring: str, context_size: int = 300) -> list[str]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è `substring` –≤ `text` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫
    –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ (–ø–æ `context_size` —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è).
    –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö.
    """
    results = []
    substring = re.escape(substring)  # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    matches = list(re.finditer(substring, text, flags=re.IGNORECASE))

    for match in matches:
        start = max(0, match.start() - context_size)
        end = min(len(text), match.end() + context_size)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if results and start <= results[-1][1]:
            # –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º
            prev_start, prev_end = results[-1]
            results[-1] = (prev_start, max(prev_end, end))
        else:
            results.append((start, end))

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∫—É—Å–∫–∏ —Ç–µ–∫—Å—Ç–∞
    contexts = [text[s:e] for s, e in results]
    return contexts


# result = find_contexts(html, "10&nbsp;320 —Ä—É–±.")
# print(result)



# # –£–º–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–µ–Ω)
# def fuzzy_text_match(a: str, b: str) -> bool:
#     # –†–∞—Å–∫–æ–¥–∏—Ä—É–µ–º HTML —Å—É—â–Ω–æ—Å—Ç–∏ (&nbsp;, &amp; –∏ —Ç.–¥.)
#     a = html.unescape(a or "")
#     b = html.unescape(b or "")

#     # –£–±–∏—Ä–∞–µ–º "–º—É—Å–æ—Ä": –≤–∞–ª—é—Ç—ã, –ø—Ä–æ–±–µ–ª—ã, —Ç–æ—á–∫–∏, –∑–∞–ø—è—Ç—ã–µ, '—Ä—É–±', '—Ä', '‚ÇΩ'
#     clean_a = re.sub(r"[\s\u00A0‚ÇΩ—Ä—Ä—É–±.,]+", "", a.lower())
#     clean_b = re.sub(r"[\s\u00A0‚ÇΩ—Ä—Ä—É–±.,]+", "", b.lower())

#     # –ï—Å–ª–∏ –æ–±–µ —Å—Ç—Ä–æ–∫–∏ —á–∏—Å–ª–æ–≤—ã–µ ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–∏—Ñ—Ä—ã
#     if clean_a.isdigit() and clean_b.isdigit():
#         return clean_a == clean_b

#     # –ò–Ω–∞—á–µ ‚Äî —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
#     return clean_a in clean_b or clean_b in clean_a


# # –ù–∞—Ö–æ–¥–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç css —Å–µ–ª–µ–∫—Ç–æ—Ä(—ã) —ç–ª–µ–º–µ–Ω—Ç–∞(–æ–≤) –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
# def find_text_selector(html: str, text: str, exact: bool = True, return_all_selectors: bool = False):
#     def get_css_path(element):
#         path = []
#         while element and element.name:
#             selector = element.name

#             # –ï—Å–ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å ID ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ
#             if element.has_attr("id"):
#                 selector = f"#{element['id']}"
#                 path.append(selector)
#                 break

#             # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∞—Å—Å(—ã)
#             elif element.has_attr("class"):
#                 selector += "." + ".".join(element["class"])

#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ä–µ–¥–∏ —Å–∏–±–ª–∏–Ω–≥–æ–≤
#             siblings = element.find_previous_siblings(element.name)
#             if siblings:
#                 selector += f":nth-of-type({len(siblings) + 1})"

#             path.append(selector)
#             element = element.parent

#         return " > ".join(reversed(path))

#     soup = BeautifulSoup(html, "html.parser")
#     selectors = []

#     for el in soup.find_all(True):
#         el_text = el.get_text(strip=True)
#         # –¢–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
#         if el_text:
#             match = (text.strip() == el_text) if exact else fuzzy_text_match(text, el_text)
#             if match:
#                 selector = get_css_path(el)
#                 if return_all_selectors:
#                     selectors.append(selector)
#                     continue
#                 return selector

#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
#         for attr_name, attr_val in el.attrs.items():
#             if isinstance(attr_val, list):
#                 attr_val = " ".join(attr_val)
#             if isinstance(attr_val, str):
#                 match = (text.strip() == attr_val.strip()) if exact else fuzzy_text_match(text, attr_val)
#                 if match:
#                     selector = get_css_path(el) + f"[{attr_name}]"
#                     if return_all_selectors:
#                         selectors.append(selector)
#                         continue
#                     return selector

#     if return_all_selectors:
#         return selectors if selectors else None
#     return None






# –ù–∞—Ö–æ–¥–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç css —Å–µ–ª–µ–∫—Ç–æ—Ä(—ã) —ç–ª–µ–º–µ–Ω—Ç–∞(–æ–≤) –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
def find_text_selector(html: str, text: str, exact: bool = False, return_all_selectors: bool = False):
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É—Ç–∏ css —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    def get_css_path(element):
        path = []
        while element and element.name:
            selector = element.name

            # –ï—Å–ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å ID ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ
            if element.has_attr("id"):
                selector = f"#{element['id']}"
                path.append(selector)
                break

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∞—Å—Å(—ã)
            elif element.has_attr("class"):
                selector += "." + ".".join(element["class"])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ä–µ–¥–∏ —Å–∏–±–ª–∏–Ω–≥–æ–≤
            siblings = element.find_previous_siblings(element.name)
            if siblings:
                selector += f":nth-of-type({len(siblings) + 1})"

            path.append(selector)
            element = element.parent

        return " > ".join(reversed(path))

    soup = BeautifulSoup(html, "html.parser")
    selectors = []

    for el in soup.find_all(True):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
        if el.string and ((text == el.string.strip()) if exact else (text in el.string)):
            selector = get_css_path(el)
            if return_all_selectors:
                selectors.append(selector)
            else:
                return selector

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        for attr_name, attr_val in el.attrs.items():
            if isinstance(attr_val, list):
                attr_val = " ".join(attr_val)
            if isinstance(attr_val, str):
                match = (text == attr_val.strip()) if exact else (text in attr_val)
                if match:
                    selector = get_css_path(el) + f"[{attr_name}]"
                    if return_all_selectors:
                        selectors.append(selector)
                    else:
                        return selector

    if return_all_selectors:
        return selectors if selectors else None

    return None


# –ü–æ–ª—É—á–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
def get_element_from_selector(html, selector):
    tree = html_lx.fromstring(html)
    search_elem = tree.cssselect(selector)
    if len(search_elem) == 0: 
        # print("üü° –ü–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ""
    element = search_elem[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ —É–∫–∞–∑–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –≤ []
    attr_match = re.search(r"\[([a-zA-Z0-9_-]+)\]", selector)

    if attr_match:
        attr_name = attr_match.group(1)
        result = element.get(attr_name)
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
        result = element.text_content().strip()
    
    return result


# def distill_selector(html, selector, get_element_from_selector, expected_value):
#     """
#     –ü—Ä–æ–±—É–µ—Ç —Å–æ–∫—Ä–∞—Ç–∏—Ç—å CSS —Å–µ–ª–µ–∫—Ç–æ—Ä, —É–¥–∞–ª—è—è –Ω–µ–Ω—É–∂–Ω—ã–µ –∑–≤–µ–Ω—å—è.
#     –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–≤–µ–Ω–∞ –ª–æ–º–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∑–≤–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä.
#     """

#     parts = [part.strip() for part in selector.split(">")]
#     if len(parts) < 2:
#         return selector

#     # print(f"üîç –ò—Å—Ö–æ–¥–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
#     # print(f"üß© –í—Å–µ–≥–æ –∑–≤–µ–Ω—å–µ–≤: {len(parts)}")

#     i = 0
#     while i < len(parts) - 1:  # –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
#         test_parts = parts[:i] + parts[i+1:]
#         test_selector = " > ".join(test_parts)

#         result = get_element_from_selector(html, test_selector)

#         if result == expected_value:
#             # print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–≤–µ–Ω–æ {i+1}/{len(parts)}: {parts[i]}")
#             parts.pop(i)  # –£–¥–∞–ª—è–µ–º –∑–≤–µ–Ω–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ, –Ω–µ –¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å
#         else:
#             # print(f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∑–≤–µ–Ω–æ {i+1}: {parts[i]}")
#             i += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É

#     final_selector = " > ".join(parts)
#     # print(f"üèÅ –ò—Ç–æ–≥–æ–≤—ã–π –æ—á–∏—â–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä:\n{final_selector}")
#     print("")
#     print("üî∑ –í—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏—é —Å–µ–ª–µ–∫—Ç–æ—Ä–∞")
#     return final_selector


# # –¢–∞–∫–∂–µ –ø–ª–æ—Ö–æ —á–∏—Å—Ç–∏—Ç —ç—Ç–æ—Ç –±–æ–ª—å—à–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä price
# """
# def distill_selector(html, selector, get_element_from_selector, expected_value):
    
#     –°–æ–∫—Ä–∞—â–∞–µ—Ç CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ, —É–¥–∞–ª—è—è –≤—Å–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –∑–≤–µ–Ω—å—è.
#     –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥–æ–µ –∑–≤–µ–Ω–æ: –µ—Å–ª–∏ –ø–æ—Å–ª–µ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è ‚Äî —É–¥–∞–ª—è–µ–º.
#     –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–±–µ–ª—ã, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–≥–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏.
    
#     # –†–∞–∑–±–∏–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–∞ —á–∞—Å—Ç–∏
#     parts = [part.strip() for part in selector.replace(">", " ").split()]
#     if len(parts) < 2:
#         return selector

#     changed = True
#     while changed:
#         changed = False
#         i = 0
#         while i < len(parts):
#             test_parts = parts[:i] + parts[i+1:]
#             if not test_parts:
#                 i += 1
#                 continue

#             test_selector = " ".join(test_parts)
#             result = get_element_from_selector(html, test_selector)

#             if result == expected_value:
#                 # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω–æ–µ –∑–≤–µ–Ω–æ
#                 parts.pop(i)
#                 changed = True
#                 # –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º i, —Ç–∞–∫ –∫–∞–∫ —Å–¥–≤–∏–Ω—É–ª–∏—Å—å –∑–≤–µ–Ω—å—è
#             else:
#                 i += 1

#     final_selector = " ".join(parts)
#     print("")
#     print("üî∑ –í—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏—é —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å)")
#     return final_selector
# """




# selector = "#i-18-bitrix-catalog-element-catalog-default-1-qepX1RQfHh6Q > div.catalog-element-wrapper.intec-content.intec-content-visible > div.catalog-element-wrapper-2.intec-content-wrapper > div.catalog-element-information-wrap > div.catalog-element-information.intec-grid.intec-grid-nowrap.intec-grid-768-wrap.intec-grid-a-h-start.intec-grid-a-v-start.intec-grid-i-20:nth-of-type(3) > div.catalog-element-information-right.intec-grid-item.intec-grid-item-768-1:nth-of-type(2) > div.catalog-element-information-right-wrapper > div.catalog-element-information-part.intec-grid.intec-grid-wrap.intec-grid-a-v-center.intec-grid-i-10 > div.intec-grid-item-auto:nth-of-type(2) > a.catalog-element-brand.intec-ui-picture > img[alt]"
# result_distill_selector = distill_selector(html, selector, get_element_from_selector, "–êntika")
# print(result_distill_selector)




















### –°—Ç–∞—Ä–∞—è, —Ä–∞–±–æ—á–∞—è
# # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü–æ–ª—É—á–∞–µ—Ç css —Å–µ–ª–µ–∫—Ç–æ—Ä, –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–µ—Ä–∂–∞–Ω–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
# def get_css_selector_from_text_value_element(html, finding_element):
#     print("")
#     print(f"üü¶ –ò–∑–≤–ª–µ–∫–ª–∏ —Ç–∞–∫–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è \"{finding_element}\":")
#     all_selectors = find_text_selector(html, finding_element, return_all_selectors=True)
#     # print(all_selectors)

#     if not all_selectors:
#         print("üü° –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞")
#         return ""

#     # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –¥–ª–∏–Ω–µ (–æ—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫ –¥–ª–∏–Ω–Ω–æ–º—É)
#     all_selectors = sorted(all_selectors, key=len)

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
#     for selector in all_selectors:
#         print("")
#         print(f"üü¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: {selector}")
#         result_element = get_element_from_selector(html, selector)

#         # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç—Ç–æ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä
#         if result_element != "":
#             print("‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä")

#             # –î–∏—Å—Ç–∏–ª–ª—è—Ü–∏—è –ø—É—Ç–µ–π —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
#             result_distill_selector = distill_selector(html, selector, get_element_from_selector, finding_element)

#             return result_distill_selector
#         else:
#             print("‚ùå –≠–ª–µ–º–µ–Ω—Ç –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω")

#     # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –ø–æ–¥–æ—à—ë–ª
#     print("üî¥ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞")
#     return ""


import re

def _split_selector_preserving_brackets(selector: str):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ '>' –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç '>' –≤–Ω—É—Ç—Ä–∏ [], (), '' –∏ "".
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–≤–µ–Ω—å–µ–≤ (—Å—Ç—Ä–æ–∫) –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ –∫—Ä–∞—è–º.
    """
    parts = []
    buf = []
    bracket_sq = 0  # []
    bracket_par = 0 # ()
    in_single = False
    in_double = False

    i = 0
    while i < len(selector):
        ch = selector[i]

        # –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–æ–∫
        if ch == "'" and not in_double:
            in_single = not in_single
            buf.append(ch)
            i += 1
            continue
        if ch == '"' and not in_single:
            in_double = not in_double
            buf.append(ch)
            i += 1
            continue

        if not in_single and not in_double:
            if ch == '[':
                bracket_sq += 1
                buf.append(ch)
                i += 1
                continue
            if ch == ']':
                if bracket_sq > 0:
                    bracket_sq -= 1
                buf.append(ch)
                i += 1
                continue
            if ch == '(':
                bracket_par += 1
                buf.append(ch)
                i += 1
                continue
            if ch == ')':
                if bracket_par > 0:
                    bracket_par -= 1
                buf.append(ch)
                i += 1
                continue

        # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '>' —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫/—Å—Ç—Ä–æ–∫
        if ch == '>' and not in_single and not in_double and bracket_sq == 0 and bracket_par == 0:
            part = ''.join(buf).strip()
            if part != '':
                parts.append(part)
            buf = []
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ >
            i += 1
            # skip following spaces
            while i < len(selector) and selector[i].isspace():
                i += 1
            continue

        buf.append(ch)
        i += 1

    last = ''.join(buf).strip()
    if last != '':
        parts.append(last)
    return parts

def simplify_selector_keep_value(html: str, selector: str, get_element_from_selector):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∑–≤–µ–Ω—å—è –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    —Ç–∞–∫–æ–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä, –ø–æ –≤—ã–∑–æ–≤—É get_element_from_selector.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      - html: —Ç–µ–∫—Å—Ç html —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      - selector: –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç—Ä–æ–≥–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä (—á–µ—Ä–µ–∑ '>')
      - get_element_from_selector: —Ñ—É–Ω–∫—Ü–∏—è (html, selector) -> value (—Å—Ç—Ä–æ–∫–∞)
    """
    # –Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    try:
        original_value = get_element_from_selector(html, selector)
    except Exception:
        # –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —É–∂–µ –≤–∞–ª–∏–¥–Ω—ã–π, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –∫–∏–¥–∞–µ—Ç ‚Äî –ª—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π
        return selector

    # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    parts = _split_selector_preserving_brackets(selector)

    # –µ—Å–ª–∏ –æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—Ç–∏–º –∫–∞–∫ –µ—Å—Ç—å
    if len(parts) <= 1:
        return selector.strip()

    i = 0
    # –ø—Ä–æ—Ö–æ–¥–∏–º —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å parts[i].
    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å original_value ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏
    # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ i (—Ç.–∫. –¥–∞–ª—å—à–µ —Å–¥–≤–∏–Ω—É–ª–∏—Å—å —ç–ª–µ–º–µ–Ω—Ç—ã).
    # –ò–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É i.
    while i < len(parts):
        # –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–≤–µ–Ω—å—è ‚Äî –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ
        if len(parts) == 1:
            break

        candidate_parts = parts[:i] + parts[i+1:]
        candidate_selector = " > ".join(candidate_parts)

        try:
            candidate_value = get_element_from_selector(html, candidate_selector)
        except Exception:
            # –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç–∞–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∏–ª–∏ –ø—Ä–∏–≤—ë–ª –∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—é ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–º–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É
            candidate_value = None

        # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: —Å—Ç—Ä–æ–≥–∞—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å
        if candidate_value == original_value:
            # —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º
            parts = candidate_parts
            # –ù–ï –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º i: –Ω—É–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ–µ –∑–≤–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∂–µ –ø–æ–∑–∏—Ü–∏–∏
            # (–ø–æ–≤–µ–¥–µ–Ω–∏–µ: —É–¥–∞–ª—è–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ–¥—Ä—è–¥)
            # –Ω–æ –µ—Å–ª–∏ i —Ç–µ–ø–µ—Ä—å == len(parts) (—É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π) - —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è naturally
            continue
        else:
            # —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–º–∞–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–≤–µ–Ω–æ –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ
            i += 1

    # —Å–æ–±—Ä–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    simplified = " > ".join(parts)
    return simplified






# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü–æ–ª—É—á–∞–µ—Ç css —Å–µ–ª–µ–∫—Ç–æ—Ä, –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–µ—Ä–∂–∞–Ω–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
def get_css_selector_from_text_value_element(html, finding_element, is_price = False):
    print("")
    print(f"üü¶ –ò–∑–≤–ª–µ–∫–ª–∏ —Ç–∞–∫–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è \"{finding_element}\":")
    if(is_price):
        # –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è price –∏ oldPrice - –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ—Ç–±—Ä–∞–±–æ—Ç—á–∏–∫
        all_selectors = handle_selector_price(html, finding_element)
    else:
        all_selectors = find_text_selector(html, finding_element, return_all_selectors=True)

    if not all_selectors:
        print("üü° –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞")
        return ""

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_selectors)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤")

    valid_selectors = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    for selector in all_selectors:
        print("")
        print(f"üü¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: {selector}")
        result_text = get_element_from_selector(html, selector)

        if result_text == "":
            print("‚ùå –≠–ª–µ–º–µ–Ω—Ç –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ ‚Äî —Å—Ç—Ä–æ–≥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
        if finding_element.strip() in result_text.strip():
            match_score = 1.0
            print(f"‚úÖ –°—Ç—Ä–æ–≥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: [{result_text}]")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è ‚Äî –æ—Ü–µ–Ω–∏–≤–∞–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
            match_score = compute_match_score(result_text, finding_element)
            print(f"‚ö™ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ {match_score*100:.1f}%: [{result_text}]")

        valid_selectors.append({
            "selector": selector,
            "result": result_text,
            "score": match_score
        })

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –ø–æ–¥–æ—à—ë–ª
    if not valid_selectors:
        print("üî¥ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤")
        return ""

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º:
    # 1Ô∏è‚É£ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    # 2Ô∏è‚É£ –ø—Ä–∏ —Ä–∞–≤–Ω—ã—Ö ‚Äî –ø–æ –¥–ª–∏–Ω–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
    valid_selectors.sort(key=lambda x: (-x["score"], len(x["selector"])))

    best = valid_selectors[0]
    print("")
    print(f"üèÜ –õ—É—á—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä: {best['selector']} (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {best['score']*100:.1f}%)")

    # –î–∏—Å—Ç–∏–ª–ª—è—Ü–∏—è –ø—É—Ç–∏
    # result_distill_selector = distill_selector(html, best["selector"], get_element_from_selector, finding_element)
    result_distill_selector = simplify_selector_keep_value(html, best["selector"], get_element_from_selector)
    return result_distill_selector


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏
def compute_match_score(found_text, target_text):
    """–û—Ü–µ–Ω–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    found_text = found_text.strip().lower()
    target_text = target_text.strip().lower()

    if not found_text or not target_text:
        return 0.0

    # –î–ª–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–ø–æ –ø–æ—Ä—è–¥–∫—É)
    common = sum(1 for a, b in zip(found_text, target_text) if a == b)
    score = common / max(len(target_text), len(found_text))
    return score










# –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Ü–µ–Ω—ã
# –ü–µ—Ä–µ–¥ —ç—Ç–∏–º –æ—á–∏—Å—Ç–∏–≤ html –æ—Ç –º—É—Å–æ—Ä–Ω—ã—Ö —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
def handle_selector_price(html, finding_element):
    # 1. –û—á–∏—Å—Ç–∫–∞ HTML
    def clean_html(text: str) -> str:
        text = text.replace("&nbsp;", " ").replace("\xa0", " ")
        text = re.sub(r"[\u200b\u200e\u200f\r\n\t]+", " ", text)
        return text.strip()

    # 2. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–µ–ª/—Ü–µ–Ω
    def normalize_price(s: str) -> str:
        if not s:
            return ""
        s = s.strip().lower()
        s = re.sub(r"[^\d,\.]", "", s)
        s = re.sub(r"[^\d]", "", s)
        return s

    # 3. –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è CSS-–ø—É—Ç–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
    def get_css_path(element):
        path = []
        while element is not None and isinstance(element.tag, str):
            selector = element.tag

            # –ï—Å–ª–∏ –µ—Å—Ç—å ID ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            if 'id' in element.attrib:
                selector = f"#{element.attrib['id']}"
                path.append(selector)
                break

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∞—Å—Å—ã
            if 'class' in element.attrib:
                classes = element.attrib['class'].split()
                selector += '.' + '.'.join(classes)

            # nth-of-type —Å—Ä–µ–¥–∏ —Å–∏–±–ª–∏–Ω–≥–æ–≤
            parent = element.getparent()
            if parent is not None:
                same_tag_siblings = [sib for sib in parent if isinstance(sib.tag, str) and sib.tag == element.tag]
                if len(same_tag_siblings) > 1:
                    index = same_tag_siblings.index(element) + 1
                    selector += f":nth-of-type({index})"

            path.append(selector)
            element = parent

        return " > ".join(reversed(path))

    # 4. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ
    def find_price_selectors(html: str, finding_element: str, return_all_selectors: bool = False):
        html = clean_html(html)
        target_norm = normalize_price(finding_element)

        tree = html_lx.fromstring(html)
        selectors = []

        for elem in tree.iter():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –¥–æ–∫—Ç–∞–π–ø—ã
            if not isinstance(elem.tag, str):
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
            text = elem.text_content().strip() if elem.text_content() else ""
            if text and normalize_price(text) == target_norm:
                selector = get_css_path(elem)
                if return_all_selectors:
                    selectors.append(selector)
                else:
                    return selector

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            for attr_name, attr_val in elem.attrib.items():
                if isinstance(attr_val, str) and normalize_price(attr_val) == target_norm:
                    selector = f"{get_css_path(elem)}[{attr_name}]"
                    if return_all_selectors:
                        selectors.append(selector)
                    else:
                        return selector

        if return_all_selectors:
            return selectors if selectors else None

        return None
    
    # –í–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    all_selectors = find_price_selectors(html, finding_element, return_all_selectors=True)
    # print(all_selectors)

    # # –í–µ—Ä–Ω—É—Ç—å –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    # first_selector = find_price_selectors(html, finding_element)
    # print(first_selector)

    return all_selectors



# TODO –ü–æ—Ç–æ–º –Ω–∞–¥–æ –±—É–¥–µ—Ç —Å–ª–∏—Ç—å –≤—Å—ë –≤ –æ–¥–∏–Ω –º–µ—Ç–æ–¥, –∞ –Ω–µ –≤—ã–¥–µ–ª—è—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω (—á–∏—Å–µ–ª)


# substring = "Makita"
substring_brand = data_input_table["links"]["simple"][0]["brand"]
substring_name = data_input_table["links"]["simple"][0]["name"]
# substring_price = data_input_table["links"]["simple"][0]["price"]
substring_price = "10 320"

selector_result = get_css_selector_from_text_value_element(html, substring_name)
# selector_result = get_css_selector_from_text_value_element(html, substring_brand)
# selector_result = get_css_selector_from_text_value_element(html, substring_price, is_price = True)
print("")
print(f"üü© selector_result = {selector_result}")








































# –°—Ç–∞—Ä–æ–µ:
#i-18-bitrix-catalog-element-catalog-default-1-qepX1RQfHh6Q > div.catalog-element-wrapper.intec-content.intec-content-visible > div.catalog-element-wrapper-2.intec-content-wrapper > div.catalog-element-information-wrap > div.catalog-element-information.intec-grid.intec-grid-nowrap.intec-grid-768-wrap.intec-grid-a-h-start.intec-grid-a-v-start.intec-grid-i-20:nth-of-type(3) > div.catalog-element-information-right.intec-grid-item.intec-grid-item-768-1:nth-of-type(2) > div.catalog-element-information-right-wrapper > div.catalog-element-information-part.intec-grid.intec-grid-wrap.intec-grid-a-v-center.intec-grid-i-10 > div.intec-grid-item-auto:nth-of-type(2) > a.catalog-element-brand.intec-ui-picture > img
# selector = "html > body > div.wrapper > img:nth-of-type(1)"
# selector = "a.catalog-element-brand img"