# –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –∞–≥–µ–Ω—Ç–∞

from addedFunc import sendMessageToYandexGPT
from addedFunc import get_html
from addedFunc import ErrorHandler
from bs4 import BeautifulSoup
from lxml import html as html_lx
import requests
import json
import re





# –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã:
# 1. –ü–æ–ª—É—á–µ–Ω–∏–µ:
#   * –¢–ó –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø—É–Ω–∫—Ç–∞–º
#   * –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç
#   * –¢–∞–±–ª–∏—á–∫–∏ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–∞–Ω–Ω—ã–º–∏
# 2. –ê–≥–µ–Ω—Ç –ø—Ä–æ–±—É–µ—Ç –∑–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π html
# 3. –ê–≥–µ–Ω—Ç —Ä–∞–∑–±–∏—Ä–∞–µ—Ç —Ç–∞–±–ª–∏—á–∫—É –∏ –¢–ó –≤ JSON —Ñ–æ—Ä–º–∞—Ç

# # ------------------

# print("–°—Ç–∞–¥–∏—è 2: –ü—Ä–æ–±—É–µ–º –∑–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π html")

# url = "https://vodomirural.ru"
# html = get_html(url)
# print(html[:500])  # –í—ã–≤–µ–¥–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å
# # print(html) 
# if(len(html) < 500): print("–û—Ç–≤–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: –°–ª–∏—à–∫–æ–º –º–∞–ª–∞—è –¥–ª–∏–Ω–∞")
# # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–∞—Ö —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º

# # ------------------

# 4. –ó–∞—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–ª–∏ —á–∞—Å—Ç—å. –ï—Å–ª–∏ –¥–∞ - —Ç–æ –æ–∫, –∏–¥—ë–º –¥–∞–ª—å—à–µ
# –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –º–æ–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å –±–µ–∑ –∑–∞—â–∏—Ç—ã

# url_first_item = "https://vodomirural.ru/catalog/vanny_stalnye_i_aksessuary_k_nim/33951/"






# –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:
data_input_table = {
    "links": {
        "simple": [
            {
                "link": "https://vodomirural.ru/catalog/vanny_stalnye_i_aksessuary_k_nim/33951/",
                "name": "–í–∞–Ω–Ω–∞ —Å—Ç–∞–ª—å 1600—Ö700—Ö400–º–º antika –±–µ–ª—ã–π –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å –Ω–æ–∂–∫–∞–º–∏ –í–ò–ó –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ",
                "price": "10 320",
                "brand": "–êntika",
                "inStock": True,
                "_selectors": {
                    "name": "",
                    "price": "",
                    "brand": "",
                    "inStock": "",
                }
            }
        ]
    },
    "search_requests": []
}
# TODO: –ü–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ –±—ã –æ–Ω –∏—Å–∫–∞–ª –Ω–µ –ø–æ–ª–Ω—ã–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ, –∞ —á–∞—Å—Ç–∏—á–Ω—ã–º
# –≠—Ç–æ –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à—É —Ç–∞–∫—É—é —Ç—É–∫—É –¥–ª—è price

first_item_link = data_input_table["links"]["simple"][0]["link"]
# print(first_item_link)
html = get_html(first_item_link)
print(html[:500])

text_includes = data_input_table["links"]["simple"][0]["name"]
if text_includes in html:
    print("üü¢ –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞!")
else:
    print("üü† –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    raise ErrorHandler("–ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1 —Ç–æ–≤–∞—Ä–∞, –Ω–∞ –Ω–µ–π –Ω–µ –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", "4-1")



### –ó–¥–µ—Å—å —Ü–∏–∫–ª for –ø–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º –≤ —Å–ª–æ–≤–∞—Ä–µ simple



### –í–æ—Ç –∑–¥–µ—Å—å, –¥–∞–ª–µ–µ, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏—Å—å –≤—Ç–æ—Ä—ã–º —Ü–∏–∫–ª–æ–º for –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º, –∏:
# 1. –ü–æ–ª—É—á–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä
# 2. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É, –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
# 3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –≤ JSON






# –ù–∞—Ö–æ–¥–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ html
def find_contexts(text: str, substring: str, context_size: int = 300) -> list[str]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è `substring` –≤ `text` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫
    –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ (–ø–æ `context_size` —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è).
    –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö.
    """
    results = []
    substring = re.escape(substring)  # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    matches = list(re.finditer(substring, text, flags=re.IGNORECASE))

    for match in matches:
        start = max(0, match.start() - context_size)
        end = min(len(text), match.end() + context_size)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if results and start <= results[-1][1]:
            # –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º
            prev_start, prev_end = results[-1]
            results[-1] = (prev_start, max(prev_end, end))
        else:
            results.append((start, end))

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∫—É—Å–∫–∏ —Ç–µ–∫—Å—Ç–∞
    contexts = [text[s:e] for s, e in results]
    return contexts




















# –ù–∞—Ö–æ–¥–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç css —Å–µ–ª–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞, –ø–æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
# def find_text_selector(html: str, text: str, exact: bool = False):
#     # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É—Ç–∏ css —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
#     def get_css_path(element):
#         path = []
#         while element and element.name:
#             selector = element.name

#             # –ï—Å–ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å ID ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ
#             if element.has_attr("id"):
#                 selector = f"#{element['id']}"
#                 path.append(selector)
#                 break

#             # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∞—Å—Å(—ã)
#             elif element.has_attr("class"):
#                 selector += "." + ".".join(element["class"])

#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ä–µ–¥–∏ —Å–∏–±–ª–∏–Ω–≥–æ–≤
#             siblings = element.find_previous_siblings(element.name)
#             if siblings:
#                 selector += f":nth-of-type({len(siblings) + 1})"

#             path.append(selector)
#             element = element.parent

#         return " > ".join(reversed(path))

#     soup = BeautifulSoup(html, "html.parser")

#     for el in soup.find_all(True):
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
#         if el.string and ((text == el.string.strip()) if exact else (text in el.string)):
#             return get_css_path(el)

#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
#         for attr_name, attr_val in el.attrs.items():
#             if isinstance(attr_val, list):
#                 attr_val = " ".join(attr_val)
#             if isinstance(attr_val, str):
#                 match = (text == attr_val.strip()) if exact else (text in attr_val)
#                 if match:
#                     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä + —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∞—Ç—Ä–∏–±—É—Ç
#                     return get_css_path(el) + f"[{attr_name}]"

#     return None

from bs4 import BeautifulSoup

# –ù–∞—Ö–æ–¥–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç css —Å–µ–ª–µ–∫—Ç–æ—Ä(—ã) —ç–ª–µ–º–µ–Ω—Ç–∞(–æ–≤) –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
def find_text_selector(html: str, text: str, exact: bool = False, return_all_selectors: bool = False):
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É—Ç–∏ css —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    def get_css_path(element):
        path = []
        while element and element.name:
            selector = element.name

            # –ï—Å–ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å ID ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ
            if element.has_attr("id"):
                selector = f"#{element['id']}"
                path.append(selector)
                break

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∞—Å—Å(—ã)
            elif element.has_attr("class"):
                selector += "." + ".".join(element["class"])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ä–µ–¥–∏ —Å–∏–±–ª–∏–Ω–≥–æ–≤
            siblings = element.find_previous_siblings(element.name)
            if siblings:
                selector += f":nth-of-type({len(siblings) + 1})"

            path.append(selector)
            element = element.parent

        return " > ".join(reversed(path))

    soup = BeautifulSoup(html, "html.parser")
    selectors = []

    for el in soup.find_all(True):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
        if el.string and ((text == el.string.strip()) if exact else (text in el.string)):
            selector = get_css_path(el)
            if return_all_selectors:
                selectors.append(selector)
            else:
                return selector

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        for attr_name, attr_val in el.attrs.items():
            if isinstance(attr_val, list):
                attr_val = " ".join(attr_val)
            if isinstance(attr_val, str):
                match = (text == attr_val.strip()) if exact else (text in attr_val)
                if match:
                    selector = get_css_path(el) + f"[{attr_name}]"
                    if return_all_selectors:
                        selectors.append(selector)
                    else:
                        return selector

    if return_all_selectors:
        return selectors if selectors else None

    return None


# –ü–æ–ª—É—á–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
def get_element_from_selector(html, selector):
    tree = html_lx.fromstring(html)
    search_elem = tree.cssselect(selector)
    if(len(search_elem) == 0): 
        print("üü° –ü–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ""
    element = search_elem[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ —É–∫–∞–∑–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –≤ []
    attr_match = re.search(r"\[([a-zA-Z0-9_-]+)\]", selector)

    if attr_match:
        attr_name = attr_match.group(1)
        result = element.get(attr_name)
    else:        
        result = html_lx.tostring(element, encoding="unicode", pretty_print=True)
    
    return result

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü–æ–ª—É—á–∞–µ—Ç css —Å–µ–ª–µ–∫—Ç–æ—Ä, –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–µ—Ä–∂–∞–Ω–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
def get_css_selector_from_text_value_element(html, finding_element):
    print("")
    print(f"üü¶ –ò–∑–≤–ª–µ–∫–ª–∏ —Ç–∞–∫–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—è \"{finding_element}\":")
    all_selector = find_text_selector(html, finding_element, return_all_selectors=True)
    # TODO –ù—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ü–∏–∫–ª for, –ø–æ –≤—Å–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
    # –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –∏—Ö –¥–ª–∏–Ω—ã
    # –ü–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç –≤–µ—Ä–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    selector = min(all_selector, key=len)
    print(selector)


    ### –¢—É—Ç –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏ css –ø—É—Ç–µ–π


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ html –ø–æ –Ω–µ–º—É:
    print("")
    print("üü¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞:")
    resule_test_element = get_element_from_selector(html, selector)
    print(resule_test_element)

    return selector

### –ó–∞–ø–∞–∫–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é
# –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ–ª–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä name


# substring = "Makita"
substring_brand = data_input_table["links"]["simple"][0]["brand"]
substring_name = data_input_table["links"]["simple"][0]["name"]

selector_result = get_css_selector_from_text_value_element(html, substring_name)
print("")
print(f"selector_result = {selector_result}")








































# –°—Ç–∞—Ä–æ–µ:
#i-18-bitrix-catalog-element-catalog-default-1-qepX1RQfHh6Q > div.catalog-element-wrapper.intec-content.intec-content-visible > div.catalog-element-wrapper-2.intec-content-wrapper > div.catalog-element-information-wrap > div.catalog-element-information.intec-grid.intec-grid-nowrap.intec-grid-768-wrap.intec-grid-a-h-start.intec-grid-a-v-start.intec-grid-i-20:nth-of-type(3) > div.catalog-element-information-right.intec-grid-item.intec-grid-item-768-1:nth-of-type(2) > div.catalog-element-information-right-wrapper > div.catalog-element-information-part.intec-grid.intec-grid-wrap.intec-grid-a-v-center.intec-grid-i-10 > div.intec-grid-item-auto:nth-of-type(2) > a.catalog-element-brand.intec-ui-picture > img
# selector = "html > body > div.wrapper > img:nth-of-type(1)"
# selector = "a.catalog-element-brand img"