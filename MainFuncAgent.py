### –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –∞–≥–µ–Ω—Ç–∞

# –í—ã–Ω–µ—Å–µ–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏
from addedFunc import sendMessageToYandexGPT
from addedFunc import get_html
from addedFunc import find_contexts

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏
from typing import Callable, Dict, List, Any, Iterable, Tuple
from collections import Counter, defaultdict
from addedFunc import ErrorHandler
from difflib import SequenceMatcher
from lxml import html as html_lx
from bs4 import BeautifulSoup
from pprint import pprint
import itertools
import requests
import json
import re





isPrint = False



# –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã:
# 1. –ü–æ–ª—É—á–µ–Ω–∏–µ:
#   * –¢–ó –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø—É–Ω–∫—Ç–∞–º
#   * –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç
#   * –¢–∞–±–ª–∏—á–∫–∏ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–∞–Ω–Ω—ã–º–∏
# 2. –ê–≥–µ–Ω—Ç –ø—Ä–æ–±—É–µ—Ç –∑–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π html
# 3. –ê–≥–µ–Ω—Ç —Ä–∞–∑–±–∏—Ä–∞–µ—Ç —Ç–∞–±–ª–∏—á–∫—É –∏ –¢–ó –≤ JSON —Ñ–æ—Ä–º–∞—Ç

# # ------------------

# print("–°—Ç–∞–¥–∏—è 2: –ü—Ä–æ–±—É–µ–º –∑–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π html")

# url = "https://vodomirural.ru"
# html = get_html(url)
# print(html[:500])  # –í—ã–≤–µ–¥–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å
# # print(html) 
# if(len(html) < 500): print("–û—Ç–≤–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: –°–ª–∏—à–∫–æ–º –º–∞–ª–∞—è –¥–ª–∏–Ω–∞")
# # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–∞—Ö —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º

# # ------------------

# 4. –ó–∞—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–ª–∏ —á–∞—Å—Ç—å. –ï—Å–ª–∏ –¥–∞ - —Ç–æ –æ–∫, –∏–¥—ë–º –¥–∞–ª—å—à–µ
# –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –º–æ–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å –±–µ–∑ –∑–∞—â–∏—Ç—ã

# url_first_item = "https://vodomirural.ru/catalog/vanny_stalnye_i_aksessuary_k_nim/33951/"






# –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:
data_input_table = {
    "links": {
        "simple": [
            {
                "link": "https://vodomirural.ru/catalog/vanny_stalnye_i_aksessuary_k_nim/33951/",
                "name": "–í–∞–Ω–Ω–∞ —Å—Ç–∞–ª—å 1600—Ö700—Ö400–º–º antika –±–µ–ª—ã–π –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å –Ω–æ–∂–∫–∞–º–∏ –í–ò–ó –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ",
                "price": "10 320",
                "brand": "–êntika",
                "stock": "–í –Ω–∞–ª–∏—á–∏–∏",
            },
            {
                "link": "https://vodomirural.ru/catalog/opora_klipsa/35508/",
                "name": "–û–ø–æ—Ä–∞ –ü–ü–†–° D25 –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ",
                "price": "5",
                "brand": "",
                "stock": "–í –Ω–∞–ª–∏—á–∏–∏",
            },
            {
                "link": "https://vodomirural.ru/catalog/zaglushka/35457/",
                "name": "–ó–∞–≥–ª—É—à–∫–∞ (D20) –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ",
                "price": "4",
                "brand": "MeerPlast",
                "stock": "–í –Ω–∞–ª–∏—á–∏–∏",
            },
            {
                "link": "https://vodomirural.ru/catalog/krestovina/35188/",
                "name": "–ö—Ä–µ—Å—Ç–æ–≤–∏–Ω–∞ 20 –ü–ü–†–° –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ",
                "price": "16",
                "brand": "MeerPlast",
                "stock": "–í –Ω–∞–ª–∏—á–∏–∏",
            },
            {
                "link": "https://vodomirural.ru/catalog/mufta_kombinirovannaya_amerikanka_razemnaya_vn_rez/32506/",
                "name": "–ú—É—Ñ—Ç–∞ –∫–æ–º–±. —Ä–∞–∑. –ü–ü–†–° (–≤–Ω. —Ä–µ–∑.) 20-1/2 –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ",
                "price": "102",
                "brand": "MeerPlast",
                "stock": "–í –Ω–∞–ª–∏—á–∏–∏",
            }
        ]
    },
    "search_requests": []
}





# –ü—Ä–æ–≤–µ—Ä—è—é, —á—Ç–æ html-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –Ω–µ–π –µ—Å—Ç—å
def check_avialible_html():
    # TODO: –ü–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ –±—ã –æ–Ω –∏—Å–∫–∞–ª –Ω–µ –ø–æ–ª–Ω—ã–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ, –∞ —á–∞—Å—Ç–∏—á–Ω—ã–º
    # –≠—Ç–æ –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à—É —Ç–∞–∫—É—é —à—Ç—É–∫—É –¥–ª—è price

    first_item_link = data_input_table["links"]["simple"][0]["link"]
    # print(first_item_link)
    html = get_html(first_item_link)
    # print(html[:500])

    text_includes = data_input_table["links"]["simple"][0]["name"]
    if text_includes in html:
        # print("üü¢ –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞!")
        a = 1
    else:
        print("üü† –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        raise ErrorHandler("–ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1 —Ç–æ–≤–∞—Ä–∞, –Ω–∞ –Ω–µ–π –Ω–µ –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", "4-1")





def print_json(input_json):
    print(json.dumps(input_json, indent=4, ensure_ascii=False))




# –ü—Ä–æ–≤–µ—Ä—è—é, —á—Ç–æ html-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –Ω–µ–π –µ—Å—Ç—å
check_avialible_html()






# –ù–∞—Ö–æ–¥–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç css —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
def find_text_selector(html: str, text: str, exact: bool = False, return_all_selectors: bool = False):
    def get_css_path(element):
        path = []
        while element and element.name:
            selector = element.name
            if element.has_attr("id"):
                selector = f"#{element['id']}"
                path.append(selector)
                break
            elif element.has_attr("class"):
                selector += "." + ".".join(element["class"])
            siblings = element.find_previous_siblings(element.name)
            if siblings:
                selector += f":nth-of-type({len(siblings) + 1})"
            path.append(selector)
            element = element.parent
        return " > ".join(reversed(path))

    def normalize_text(s):
        return " ".join(s.split())

    def similarity(a, b):
        return SequenceMatcher(None, normalize_text(a), normalize_text(b)).ratio()

    soup = BeautifulSoup(html, "html.parser")
    selectors = []

    # –≠—Ç–∞–ø 1. –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ (—Å—Ç—Ä–æ–≥–∏–π / —á–∞—Å—Ç–∏—á–Ω—ã–π)
    for el in soup.find_all(True):
        element_text = el.get_text(strip=True)
        if element_text:
            match = (text == element_text) if exact else (text in element_text)
            if match:
                selector = get_css_path(el)
                if return_all_selectors:
                    selectors.append(selector)
                else:
                    return selector

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        for attr_name, attr_val in el.attrs.items():
            if isinstance(attr_val, list):
                attr_val = " ".join(attr_val)
            if isinstance(attr_val, str):
                match = (text == attr_val.strip()) if exact else (text in attr_val)
                if match:
                    selector = get_css_path(el) + f"[{attr_name}]"
                    if return_all_selectors:
                        selectors.append(selector)
                    else:
                        return selector

    # –≠—Ç–∞–ø 2. –ù–µ—Å—Ç—Ä–æ–≥–∏–π (fuzzy) –ø–æ–∏—Å–∫
    if not selectors:
        threshold = 0.7
        for el in soup.find_all(True):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
            element_text = el.get_text(strip=True)
            if element_text:
                score = similarity(text, element_text)
                if score >= threshold:
                    selector = get_css_path(el)
                    if return_all_selectors:
                        selectors.append(selector)
                    else:
                        return selector

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            for attr_name, attr_val in el.attrs.items():
                if isinstance(attr_val, list):
                    attr_val = " ".join(attr_val)
                if isinstance(attr_val, str):
                    score = similarity(text, attr_val)
                    if score >= threshold:
                        selector = get_css_path(el) + f"[{attr_name}]"
                        if return_all_selectors:
                            selectors.append(selector)
                        else:
                            return selector

    if return_all_selectors:
        return selectors if selectors else None
    return None






# –ü–æ–ª—É—á–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
def get_element_from_selector(html, selector):
    tree = html_lx.fromstring(html)
    search_elem = tree.cssselect(selector)
    if len(search_elem) == 0: 
        # print("üü° –ü–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ""
    element = search_elem[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ —É–∫–∞–∑–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –≤ []
    attr_match = re.search(r"\[([a-zA-Z0-9_-]+)\]", selector)

    if attr_match:
        attr_name = attr_match.group(1)
        result = element.get(attr_name)
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
        result = element.text_content().strip()
    
    return result




# –î–∏—Å—Ç–∏–ª–ª—è—Ü–∏—è –ø—É—Ç–∏ css —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä, –æ—á–∏—â–∞–µ—Ç, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π
def simplify_selector_keep_value(html: str, selector: str, get_element_from_selector):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∑–≤–µ–Ω—å—è –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    —Ç–∞–∫–æ–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä, –ø–æ –≤—ã–∑–æ–≤—É get_element_from_selector.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      - html: —Ç–µ–∫—Å—Ç html —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      - selector: –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç—Ä–æ–≥–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä (—á–µ—Ä–µ–∑ '>')
      - get_element_from_selector: —Ñ—É–Ω–∫—Ü–∏—è (html, selector) -> value (—Å—Ç—Ä–æ–∫–∞)
    """

    def _split_selector_preserving_brackets(selector: str):
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ '>' –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç '>' –≤–Ω—É—Ç—Ä–∏ [], (), '' –∏ "".
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–≤–µ–Ω—å–µ–≤ (—Å—Ç—Ä–æ–∫) –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ –∫—Ä–∞—è–º.
        """
        parts = []
        buf = []
        bracket_sq = 0  # []
        bracket_par = 0 # ()
        in_single = False
        in_double = False   

        i = 0
        while i < len(selector):
            ch = selector[i]    

            # –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–æ–∫
            if ch == "'" and not in_double:
                in_single = not in_single
                buf.append(ch)
                i += 1
                continue
            if ch == '"' and not in_single:
                in_double = not in_double
                buf.append(ch)
                i += 1
                continue    

            if not in_single and not in_double:
                if ch == '[':
                    bracket_sq += 1
                    buf.append(ch)
                    i += 1
                    continue
                if ch == ']':
                    if bracket_sq > 0:
                        bracket_sq -= 1
                    buf.append(ch)
                    i += 1
                    continue
                if ch == '(':
                    bracket_par += 1
                    buf.append(ch)
                    i += 1
                    continue
                if ch == ')':
                    if bracket_par > 0:
                        bracket_par -= 1
                    buf.append(ch)
                    i += 1
                    continue    

            # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '>' —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫/—Å—Ç—Ä–æ–∫
            if ch == '>' and not in_single and not in_double and bracket_sq == 0 and bracket_par == 0:
                part = ''.join(buf).strip()
                if part != '':
                    parts.append(part)
                buf = []
                # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ >
                i += 1
                # skip following spaces
                while i < len(selector) and selector[i].isspace():
                    i += 1
                continue    

            buf.append(ch)
            i += 1  

        last = ''.join(buf).strip()
        if last != '':
            parts.append(last)
        return parts

    # –Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    try:
        original_value = get_element_from_selector(html, selector)
    except Exception:
        # –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —É–∂–µ –≤–∞–ª–∏–¥–Ω—ã–π, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –∫–∏–¥–∞–µ—Ç ‚Äî –ª—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π
        return selector

    # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    parts = _split_selector_preserving_brackets(selector)

    # –µ—Å–ª–∏ –æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—Ç–∏–º –∫–∞–∫ –µ—Å—Ç—å
    if len(parts) <= 1:
        return selector.strip()

    i = 0
    # –ø—Ä–æ—Ö–æ–¥–∏–º —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å parts[i].
    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å original_value ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏
    # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ i (—Ç.–∫. –¥–∞–ª—å—à–µ —Å–¥–≤–∏–Ω—É–ª–∏—Å—å —ç–ª–µ–º–µ–Ω—Ç—ã).
    # –ò–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É i.
    while i < len(parts):
        # –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–≤–µ–Ω—å—è ‚Äî –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ
        if len(parts) == 1:
            break

        candidate_parts = parts[:i] + parts[i+1:]
        candidate_selector = " > ".join(candidate_parts)

        try:
            candidate_value = get_element_from_selector(html, candidate_selector)
        except Exception:
            # –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç–∞–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∏–ª–∏ –ø—Ä–∏–≤—ë–ª –∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—é ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–º–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É
            candidate_value = None

        # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: —Å—Ç—Ä–æ–≥–∞—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å
        if candidate_value == original_value:
            # —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º
            parts = candidate_parts
            # –ù–ï –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º i: –Ω—É–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ–µ –∑–≤–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∂–µ –ø–æ–∑–∏—Ü–∏–∏
            # (–ø–æ–≤–µ–¥–µ–Ω–∏–µ: —É–¥–∞–ª—è–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ–¥—Ä—è–¥)
            # –Ω–æ –µ—Å–ª–∏ i —Ç–µ–ø–µ—Ä—å == len(parts) (—É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π) - —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è naturally
            continue
        else:
            # —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–º–∞–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–≤–µ–Ω–æ –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ
            i += 1

    # —Å–æ–±—Ä–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    simplified = " > ".join(parts)
    return simplified






# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü–æ–ª—É—á–∞–µ—Ç css —Å–µ–ª–µ–∫—Ç–æ—Ä, –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
def get_css_selector_from_text_value_element(html, finding_element, is_price = False):
    print("")
    if isPrint: print(f"üü¶ –ò–∑–≤–ª–µ–∫–ª–∏ —Ç–∞–∫–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è \"{finding_element}\":")
    if(is_price):
        # –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è price –∏ oldPrice - –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ—Ç–±—Ä–∞–±–æ—Ç—á–∏–∫
        all_selectors = handle_selector_price(html, finding_element)
    elif finding_element.strip().lower() == "–≤ –Ω–∞–ª–∏—á–∏–∏":
        all_selectors = find_text_selector(html, finding_element, exact=True, return_all_selectors=True)
    else:
        all_selectors = find_text_selector(html, finding_element, return_all_selectors=True)

    if not all_selectors:
        if isPrint: print("üü° –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞")
        return ""

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_selectors)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤")

    valid_selectors = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    for selector in all_selectors:
        if isPrint: print("")
        if isPrint: print(f"üü¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: {selector}")
        result_text = get_element_from_selector(html, selector)

        if result_text == "":
            if isPrint: print("‚ùå –≠–ª–µ–º–µ–Ω—Ç –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ ‚Äî —Å—Ç—Ä–æ–≥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
        if finding_element.strip() in result_text.strip():
            match_score = 1.0
            if isPrint: print(f"‚úÖ –°—Ç—Ä–æ–≥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: [{result_text}]")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è ‚Äî –æ—Ü–µ–Ω–∏–≤–∞–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
            match_score = compute_match_score(result_text, finding_element)
            if isPrint: print(f"‚ö™ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ {match_score*100:.1f}%: [{result_text}]")

        valid_selectors.append({
            "selector": selector,
            "result": result_text,
            "score": match_score
        })

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –ø–æ–¥–æ—à—ë–ª
    if not valid_selectors:
        if isPrint: print("üî¥ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤")
        return ""

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º:
    # 1Ô∏è‚É£ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    # 2Ô∏è‚É£ –ø—Ä–∏ —Ä–∞–≤–Ω—ã—Ö ‚Äî –ø–æ –¥–ª–∏–Ω–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
    valid_selectors.sort(key=lambda x: (-x["score"], len(x["selector"])))

    best = valid_selectors[0]
    if isPrint: print("")
    if isPrint: print(f"üèÜ –õ—É—á—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä: {best['selector']} (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {best['score']*100:.1f}%)")

    # –î–∏—Å—Ç–∏–ª–ª—è—Ü–∏—è –ø—É—Ç–∏
    # result_distill_selector = distill_selector(html, best["selector"], get_element_from_selector, finding_element)
    result_distill_selector = simplify_selector_keep_value(html, best["selector"], get_element_from_selector)
    return result_distill_selector


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏
def compute_match_score(found_text, target_text):
    """–û—Ü–µ–Ω–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    found_text = found_text.strip().lower()
    target_text = target_text.strip().lower()

    if not found_text or not target_text:
        return 0.0

    # –î–ª–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–ø–æ –ø–æ—Ä—è–¥–∫—É)
    common = sum(1 for a, b in zip(found_text, target_text) if a == b)
    score = common / max(len(target_text), len(found_text))
    return score



# –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Ü–µ–Ω—ã
# –ü–µ—Ä–µ–¥ —ç—Ç–∏–º –æ—á–∏—Å—Ç–∏–≤ html –æ—Ç –º—É—Å–æ—Ä–Ω—ã—Ö —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
def handle_selector_price(html, finding_element):
    # TODO –ü–æ—Ç–æ–º –Ω–∞–¥–æ –±—É–¥–µ—Ç —Å–ª–∏—Ç—å –≤—Å—ë –≤ –æ–¥–∏–Ω –º–µ—Ç–æ–¥, –∞ –Ω–µ –≤—ã–¥–µ–ª—è—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω (—á–∏—Å–µ–ª)

    # 1. –û—á–∏—Å—Ç–∫–∞ HTML
    def clean_html(text: str) -> str:
        text = text.replace("&nbsp;", " ").replace("\xa0", " ")
        text = re.sub(r"[\u200b\u200e\u200f\r\n\t]+", " ", text)
        return text.strip()

    # 2. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–µ–ª/—Ü–µ–Ω
    def normalize_price(s: str) -> str:
        if not s:
            return ""
        s = s.strip().lower()
        s = re.sub(r"[^\d,\.]", "", s)
        s = re.sub(r"[^\d]", "", s)
        return s

    # 3. –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è CSS-–ø—É—Ç–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
    def get_css_path(element):
        path = []
        while element is not None and isinstance(element.tag, str):
            selector = element.tag

            # –ï—Å–ª–∏ –µ—Å—Ç—å ID ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            if 'id' in element.attrib:
                selector = f"#{element.attrib['id']}"
                path.append(selector)
                break

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∞—Å—Å—ã
            if 'class' in element.attrib:
                classes = element.attrib['class'].split()
                selector += '.' + '.'.join(classes)

            # nth-of-type —Å—Ä–µ–¥–∏ —Å–∏–±–ª–∏–Ω–≥–æ–≤
            parent = element.getparent()
            if parent is not None:
                same_tag_siblings = [sib for sib in parent if isinstance(sib.tag, str) and sib.tag == element.tag]
                if len(same_tag_siblings) > 1:
                    index = same_tag_siblings.index(element) + 1
                    selector += f":nth-of-type({index})"

            path.append(selector)
            element = parent

        return " > ".join(reversed(path))

    # 4. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ
    def find_price_selectors(html: str, finding_element: str, return_all_selectors: bool = False):
        html = clean_html(html)
        target_norm = normalize_price(finding_element)

        tree = html_lx.fromstring(html)
        selectors = []

        for elem in tree.iter():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –¥–æ–∫—Ç–∞–π–ø—ã
            if not isinstance(elem.tag, str):
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
            text = elem.text_content().strip() if elem.text_content() else ""
            if text and normalize_price(text) == target_norm:
                selector = get_css_path(elem)
                if return_all_selectors:
                    selectors.append(selector)
                else:
                    return selector

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            for attr_name, attr_val in elem.attrib.items():
                if isinstance(attr_val, str) and normalize_price(attr_val) == target_norm:
                    selector = f"{get_css_path(elem)}[{attr_name}]"
                    if return_all_selectors:
                        selectors.append(selector)
                    else:
                        return selector

        if return_all_selectors:
            return selectors if selectors else None

        return None
    
    # –í–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    all_selectors = find_price_selectors(html, finding_element, return_all_selectors=True)
    # print(all_selectors)

    # # –í–µ—Ä–Ω—É—Ç—å –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    # first_selector = find_price_selectors(html, finding_element)
    # print(first_selector)

    return all_selectors



### –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

# isPrint = True

# elem_number = 0
# html = get_html( data_input_table["links"]["simple"][elem_number]["link"])
# print(html[:500])

# substring_brand = data_input_table["links"]["simple"][elem_number]["brand"]
# substring_name = data_input_table["links"]["simple"][elem_number]["name"]
# substring_price = data_input_table["links"]["simple"][elem_number]["price"]
# substring_stock = data_input_table["links"]["simple"][elem_number]["inStock"]

# # selector_result = get_css_selector_from_text_value_element(html, substring_name)
# # selector_result = get_css_selector_from_text_value_element(html, substring_brand)
# selector_result = get_css_selector_from_text_value_element(html, substring_stock)
# # selector_result = get_css_selector_from_text_value_element(html, substring_price, is_price = True)
# print("")
# print(f"üü© selector_result = {selector_result}")


# # # –ü–æ–ª—É—á–∞–µ–º –∫—É—Å–∫–∏ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ
# # result = find_contexts(html, substring_name)
# # print(result)


































content_html = {
    "simple": [
        # {
        #     "link": "",
        #     "html_content": ""  
        # },    
    ]
}



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ù–∞—Ö–æ–¥–∏—Ç css —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç data_input_table["links"]["simple"] (—Ö–æ—Ç—è –º–æ–∂–µ—Ç –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Å –ø–æ—Ö–æ–∂–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π)
def fill_selectors_for_items(items, get_css_selector_from_text_value_element):
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–µ–º {len(data_input_table["links"]["simple"])} —Å—Ç—Ä–∞–Ω–∏—Ü")
    for item in items:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è _selectors ‚Äî —Å–æ–∑–¥–∞—ë–º
        selectors = {}
        html = get_html(item["link"])

        # –•—Ä–∞–Ω—é html –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
        new_item = {
            "link": item["link"],
            "html_content": html
        }
        content_html["simple"].append(new_item)

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–ª—é—á–∞–º, –∫—Ä–æ–º–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö –∏ —Å—Å—ã–ª–∫–∏
        for key, value in item.items():
            if key.startswith("_") or key == "link":
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è

            selector = ""
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏
            if isinstance(value, str) and value.strip():
                try:
                    is_price = key in ("price", "oldPrice")
                    selector = get_css_selector_from_text_value_element(html, value, is_price=is_price)
                    if selector:
                        selectors[key] = selector
                        print(f"üü© –£—Å–ø–µ—à–Ω–æ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—è {key}")
                    else:
                        print(f"üü® –û–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ø–æ–ª–µ {key}, –Ω–æ –Ω–µ –Ω–∞—à–ª–∏ –¥–ª—è –Ω–µ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞")
                except Exception as e:
                    print(f"üüß –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è {key}: {e}")
            else:
                print(f"‚¨ú –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ {key}: –ù–µ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        print("_______________________")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        item["_selectors"] = selectors


### –¢–µ—Å—Ç –≤—Å–µ—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤


fill_selectors_for_items(
    data_input_table["links"]["simple"],
    get_css_selector_from_text_value_element
)

# print(json.dumps(data_input_table["links"]["simple"], indent=4, ensure_ascii=False))
print_json(data_input_table["links"]["simple"])
# print(json.dumps(content_html, indent=4, ensure_ascii=False))





#  –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–∏ 2 json –ª–æ–∫–∞–ª—å–Ω–æ (–ø–æ –±–æ–ª—å—à–µ–π —á–∞—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∞)

import os

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É "cache", –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs("cache", exist_ok=True)

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON ---
with open("cache/data_input_table.json", "w", encoding="utf-8") as f:
    json.dump(data_input_table, f, ensure_ascii=False, indent=4)

with open("cache/content_html.json", "w", encoding="utf-8") as f:
    json.dump(content_html, f, ensure_ascii=False, indent=4)

print("‚úÖ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")











# ### –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ

# with open("cache/data_input_table.json", "r", encoding="utf-8") as f:
#     data_input_table = json.load(f)

# with open("cache/content_html.json", "r", encoding="utf-8") as f:
#     content_html = json.load(f)

# print("‚úÖ –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ")
# # print("data_input_table:", data_input_table)
# # print("content_html:", content_html)


# print(json.dumps(data_input_table["links"]["simple"], indent=4, ensure_ascii=False))
# # print(json.dumps(content_html, indent=4, ensure_ascii=False))



















# –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ–±—Ä–∞–ª–∏ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—á–µ–∫, 
# –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–ª—É—á—à–∏–π, –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
def select_best_selectors(input_data, content_html):
    # TODO –ù–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –Ω–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

    def normalize_text(s: str) -> str:
        if s is None:
            return ""
        s = re.sub(r"\s+", " ", s).strip()
        return s.lower()

    def normalize_price(s: str) -> str:
        if s is None:
            return ""
        # –∏–∑–≤–ª–µ—á—å —Ü–∏—Ñ—Ä—ã –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        digits = re.findall(r"[\d]+", s.replace(",", ""))
        return "".join(digits)

    def extract_using_selector(tree: html_lx.HtmlElement, selector: str) -> str:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–∞ –¥–µ—Ä–µ–≤–µ lxml –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –∞—Ç—Ä–∏–±—É—Ç –≤ –∫–æ–Ω—Ü–µ –≤—Ä–æ–¥–µ "[content]" –∏–ª–∏ "[class]".
        –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        """
        selector = selector.strip()
        # –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–¥–µ–ª–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –≤ –∫–æ–Ω—Ü–µ
        attr_match = re.search(r"\[([a-zA-Z0-9_\-:]+)\]\s*$", selector)
        attr = None
        if attr_match:
            attr = attr_match.group(1)
            # —É–±–µ—Ä—ë–º —ç—Ç–æ—Ç –∫—É—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ cssselect, –µ—Å–ª–∏ –æ–Ω —Å—Ç–æ—è–ª –≤ –∫–æ–Ω—Ü–µ –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
            # (–Ω–æ —É—á—Ç–∏: —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –ª–µ–≥–∏—Ç–∏–º–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å [..] –≤–Ω—É—Ç—Ä–∏ ‚Äî –º—ã —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π)
            # –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏–∫–æ–º —Å–Ω–∞—á–∞–ª–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å —Å–ª–æ–∂–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞)
            try:
                elems = tree.cssselect(selector)
            except Exception:
                # –ø–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π [attr]
                selector_no_attr = selector[:attr_match.start()].rstrip()
                try:
                    elems = tree.cssselect(selector_no_attr)
                except Exception:
                    elems = []
        else:
            try:
                elems = tree.cssselect(selector)
            except Exception:
                elems = []

        for el in elems:
            # –µ—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ attr –∏ —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –µ–≥–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
            if attr:
                val = el.get(attr)
                if val:
                    return val.strip()
            # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç ‚Äî meta or input, –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            if el.tag in ("meta", "link", "img", "input"):
                # common attrs
                for a in ("content", "value", "alt", "src", "href", "data-src"):
                    v = el.get(a)
                    if v:
                        return v.strip()
            # –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            text = el.text_content()
            if text and text.strip():
                return text.strip()
        return ""

    def default_fetcher(url: str, timeout=10) -> str:
        r = requests.get(url, timeout=timeout, headers={"User-Agent": "parser-bot/1.0"})
        r.raise_for_status()
        return r.text

    def score_selector(selector: str, count: int) -> float:
        # —á–µ–º —á–∞—â–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –∏ –∫–æ—Ä–æ—á–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ
        return count / (1 + len(selector))
    




    ### –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º






    def resolve_selectors_across_examples(
            examples: List[Dict[str, Any]],
            fields: Iterable[str] = None,
            html_fetcher: Callable[[str], str] = None,
            max_combination_size: int = None,
            verbose: bool = True,
        ) -> Dict[str, Any]:

        # –ï—Å–ª–∏ fields –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤
        if not fields:
            if not examples:
                raise ValueError("–°–ø–∏—Å–æ–∫ examples –ø—É—Å—Ç ‚Äî –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            fields = [key for key in examples[0].keys() if key != "link" and not key.startswith("_")]

        if verbose:
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–ª—è: {fields}")
        """
        examples: —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤, –∫–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä - dict —Å keys: link, –ø–æ–ª—è –∏ _selectors dict
        –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {
            "result_selectors": {field: [selector(s) chosen as list])},
            "report": {...}
        }
        """
        # 1) –°–æ–±–∏—Ä–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–ª—è–º
        selectors_by_field = defaultdict(list)
        for ex in examples:
            sdict = ex.get("_selectors", {})
            for f in fields:
                sel = sdict.get(f)
                if sel:
                    selectors_by_field[f].append(sel.strip())

        # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã
        counters = {f: Counter(selectors_by_field[f]) for f in fields}
        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: –ø–æ —á–∞—Å—Ç–æ—Ç–µ desc, –∑–∞—Ç–µ–º –ø–æ –¥–ª–∏–Ω–µ asc
        candidates = {}
        for f, counter in counters.items():
            items = list(counter.items())
            items.sort(key=lambda t: (-t[1], len(t[0])))
            candidates[f] = [it[0] for it in items]

        if verbose:
            print("–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ –ø–æ–ª—è–º (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞):")
            for f in fields:
                print(f" - {f}: {len(candidates[f])} —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ -> {candidates[f]}")

        # 2) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ html –¥–µ—Ä–µ–≤—å–µ–≤
        trees = []
        for ex in examples:
            url = ex["link"]
            html_text = html_fetcher(url)
            tree = html_lx.fromstring(html_text)
            trees.append((url, tree, ex))

        # 3) –ü—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫: —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–±–æ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ (–∫–æ–º–±–∏–Ω–∞—Ü–∏—é) –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è
        def check_selector_set_for_field(field: str, sel_set: Tuple[str, ...]) -> bool:
            # –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ sel_set –∏–∑–≤–ª–µ—á—ë—Ç —Å–æ–≤–ø–∞–¥–∞—é—â–µ–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            for url, tree, ex in trees:
                expected = ex.get(field, "")
                extracted_any = ""
                for s in sel_set:
                    got = extract_using_selector(tree, s)
                    if got:
                        extracted_any = got
                        break
                # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if field == "price":
                    if normalize_price(expected) != normalize_price(extracted_any):
                        if verbose:
                            print(f"  [FAIL] {field} on {url}: expected '{expected}' got '{extracted_any}' using {sel_set}")
                        return False
                else:
                    if normalize_text(expected) != normalize_text(extracted_any):
                        if verbose:
                            print(f"  [FAIL] {field} on {url}: expected '{expected}' got '{extracted_any}' using {sel_set}")
                        return False
            if verbose:
                print(f"  [OK] field {field} works with selectors {sel_set}")
            return True

        result_selectors = {}
        report = {"tried": {}}

        # –ª–∏–º–∏—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        n_examples = len(examples)
        if max_combination_size is None:
            max_combination_size = n_examples - 1  # –µ—Å–ª–∏ —Ä–∞–≤–µ–Ω n_examples => –æ—à–∏–±–∫–∞ –ø–æ —É—Å–ª–æ–≤–∏—é

        for field in fields:
            cand_list = candidates.get(field, [])
            report["tried"][field] = {"singles": [], "combinations": []}

            # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            found = False
            for s in cand_list:
                report["tried"][field]["singles"].append(s)
                if check_selector_set_for_field(field, (s,)):
                    result_selectors[field] = [s]
                    found = True
                    break
            if found:
                continue

            # –µ—Å–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ 2..max_combination_size
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–µ—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –º–∞–ª–æ, —Ç–æ –≤–æ–∑–º–æ–∂–Ω—ã –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏)
            for size in range(2, max_combination_size + 1):
                if size > len(cand_list):
                    break
                if verbose:
                    print(f"–ü—Ä–æ–±—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ size={size} –¥–ª—è –ø–æ–ª—è {field} (–≤—Å–µ–≥–æ {len(cand_list)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤)")
                ok = False
                # –æ–≥—Ä–∞–Ω–∏—á–∏–º —á–∏—Å–ª–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π, —á—Ç–æ–±—ã –Ω–µ –≤–∑–æ—Ä–≤–∞—Ç—å –≤—Ä–µ–º—è: –µ—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –º–Ω–æ–≥–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à—É—é —á–∞—Å—Ç—å
                max_cands_for_comb = 12
                use_candidates = cand_list[:max_cands_for_comb] if len(cand_list) > max_cands_for_comb else cand_list
                for combo in itertools.combinations(use_candidates, size):
                    report["tried"][field]["combinations"].append(combo)
                    if check_selector_set_for_field(field, combo):
                        result_selectors[field] = list(combo)
                        ok = True
                        break
                if ok:
                    found = True
                    break

            if not found:
                # –µ—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–º–æ–∂ —Ä–∞–∑–º–µ—Ä —Ä–∞–≤–µ–Ω —á–∏—Å–ª—É –ø—Ä–∏–º–µ—Ä–æ–≤ -> –ø–æ —Ç–≤–æ–µ–π –ª–æ–≥–∏–∫–µ —ç—Ç–æ –æ—à–∏–±–∫–∞
                if max_combination_size >= n_examples:
                    raise RuntimeError(f"–î–ª—è –ø–æ–ª—è '{field}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –Ω–∞–±–æ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤; "
                                       f"–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–≥ {n_examples} ‚Äî —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–µ.")
                else:
                    # –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –∏ –æ—Ç—á—ë—Ç–∏–º
                    result_selectors[field] = []
                    if verbose:
                        print(f"[WARN] –î–ª—è –ø–æ–ª—è {field} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä(—ã).")

        return {"result_selectors": result_selectors, "report": report}

    def make_html_fetcher_from_cache(content_html):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é html_fetcher(link),
        –∫–æ—Ç–æ—Ä–∞—è –¥–æ—Å—Ç–∞—ë—Ç html_content –∏–∑ –∑–∞—Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è content_html
        """
        html_map = {}
        for group in content_html.values():
            for item in group:
                link = item.get("link", "").strip()
                html_text = item.get("html_content", "")
                if link and html_text:
                    html_map[link] = html_text

        def fetcher(url):
            if url in html_map:
                return html_map[url]
            raise ValueError(f"HTML –¥–ª—è {url} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ content_html")

        return fetcher

    # —Å–æ–∑–¥–∞—ë–º html_fetcher –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–µ—à–∞, –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö html —Å—Ç—Ä–∞–Ω–∏—á–µ–∫
    html_fetcher = make_html_fetcher_from_cache(content_html)

    # –≤—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º
    result = resolve_selectors_across_examples(
        input_data,
        html_fetcher=html_fetcher,
        verbose=True
    )

    return result









result_select_best_selectors = select_best_selectors(data_input_table["links"]["simple"], content_html)

print("‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã:")
print_json(result_select_best_selectors["result_selectors"])




















































"""

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ:


...


–ù—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏–∑ excel —Ñ–∞–π–ª–∞
–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –¢–≥

"""